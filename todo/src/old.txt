// https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html
// https://github.com/jaheba/stuff/blob/master/communicating_intent.md
// https://ferrisellis.com/content/rust-implementing-units-for-types/
// http://xion.io/post/code/rust-iter-patterns.html
// http://xion.io/post/code/rust-string-args.html
// https://www.reddit.com/r/rust/comments/hzx1ak/beginners_critiques_of_rust/fzm45ms?utm_source=share&utm_medium=web2x
use actix_cors::Cors;
use actix_web::{web, App, HttpResponse, HttpServer};
use async_graphql::http::{playground_source, GraphQLPlaygroundConfig};
use async_graphql::{Context, EmptyMutation, EmptySubscription, FieldResult};
use async_graphql::{Object, SimpleObject};
use async_graphql_actix_web::{GQLRequest, GQLResponse};
use meilisearch_sdk::{client::*, document::*, search::*};
use serde::{Deserialize, Serialize};
use sqlx::PgPool;
use std::env;
use std::thread::sleep;
use std::time::Duration;

struct QueryRoot;

#[Object]
impl QueryRoot {
    async fn todos(&self, ctx: &Context<'_>) -> FieldResult<Vec<Todo>> {
        let db_pool = ctx.data::<PgPool>()?;

        let assemblies: Vec<Todo> = sqlx::query_as!(
            Todo,
            r#"
                SELECT id, text
                FROM todos
            "#,
        )
        .fetch_all(db_pool)
        .await
        .unwrap();

        Ok(assemblies)
    }
    // async fn tasks(&self, _ctx: &Context<'_>) -> FieldResult<Vec<Task>> {
    //     // let db_pool = ctx.data::<PgPool>()?;
    //
    //     let tasks = vec![Task {
    //         id: 0,
    //         area: "area".to_string(),
    //         panel: "panel".to_string(),
    //         task_type: "task_type".to_string(),
    //         task: "task".to_string(),
    //         status: "status".to_string(),
    //         remaining_time: 0,
    //     }];
    //
    //     Ok(tasks)
    // }
}

#[SimpleObject]
#[derive(Debug)]
struct Todo {
    id: i32,
    text: String,
}

type Schema = async_graphql::Schema<QueryRoot, EmptyMutation, EmptySubscription>;

async fn index(schema: web::Data<Schema>, req: GQLRequest) -> GQLResponse {
    req.into_inner().execute(&schema).await.into()
}

async fn index_playground() -> actix_web::Result<HttpResponse> {
    Ok(HttpResponse::Ok()
        .content_type("text/html; charset=utf-8")
        .body(playground_source(
            GraphQLPlaygroundConfig::new("/").subscription_endpoint("/"),
        )))
}

#[SimpleObject]
#[derive(Serialize, Deserialize, Debug)]
struct Task {
    id: i32,
    area: String,
    panel: String,
    task_type: String,
    task: String,
    status: String,
    remaining_time: i32,
}

impl Document for Task {
    type UIDType = i32;

    fn get_uid(&self) -> &Self::UIDType {
        &self.id
    }
}

#[actix_rt::main]
async fn main() -> anyhow::Result<()> {
    // docker run -it --rm -p 7700:7700 getmeili/meilisearch:latest ./meilisearch --master-key=masterKey
    // https://www.elastic.co/blog/found-keeping-elasticsearch-in-sync
    // https://docs.rs/meilisearch-sdk/0.2.0/src/meilisearch_sdk/search.rs.html#152
    // Soft delete records, exclude from search
    // https://matklad.github.io/2020/08/12/who-builds-the-builder.html
    // https://www.npmjs.com/package/dompurify

    // let client = Client::new("http://localhost:7700", "masterKey");
    // let tasks_index = client.get_or_create("tasks").await.unwrap();
    //
    // let mut tasks = vec![];
    //
    // let mut rdr = csv::Reader::from_path("C:/Users/mattw/dev/todo-rust/todo/Todos.csv").unwrap();
    // for row in rdr.deserialize() {
    //     let task: Task = row?;
    //     tasks.push(task);
    // }
    //
    // tasks_index
    //     .add_or_replace(&tasks, Some("id"))
    //     .await
    //     .unwrap();
    //
    // sleep(Duration::from_secs(1));
    //
    // let query = Query::new("").with_filters("area = n1");
    // let results = tasks_index.search::<Task>(&query).await.unwrap().hits;
    //
    // results.iter().for_each(|task| println!("{:?}", task));

    let db_pass = env::var("DB_PASS").unwrap();
    let conn = format!("postgres://postgres:{}@35.185.200.15/rust", db_pass);

    let db_pool = PgPool::new(conn.as_str()).await?;

    let schema = async_graphql::Schema::build(QueryRoot, EmptyMutation, EmptySubscription)
        .data(db_pool)
        .finish();

    HttpServer::new(move || {
        App::new()
            .data(schema.clone())
            .wrap(Cors::new().finish())
            .route("/", web::post().to(index))
            .route("/", web::get().to(index_playground))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await?;

    println!("Server started");

    Ok(())
}
